generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:pasword@localhost:5432/cado4ok?schema=public"
}

model School {
  id       String    @id @default(uuid())
  name     String
  address  String
  email    String    @unique
  admins   Admin[]
  teachers Teacher[]
  parents  Parent[]
  groups   Group[]
}

model Group {
  id        String      @id @default(uuid())
  name      String
  school    School      @relation(fields: [schoolId], references: [id])
  schoolId  String
  teachers  Teacher[]
  kids      Kid[]
  amendList AmendList[]
}

//-------- Users and user types ------------

enum Role {
  ADMIN
  TEACHER
  PARENT
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  phone     String    @unique
  parents   Parent[]
  teachers  Teacher[]
  admins    Admin[]
}

model Parent {
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  role     Role    @default(PARENT)
  school   School  @relation(fields: [schoolId], references: [id])
  schoolId String
  note     String?
  kids     Kid[]
}

model Teacher {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  role     Role    @default(TEACHER)
  school   School  @relation(fields: [schoolId], references: [id])
  schoolId String
  note     String?
  groups   Group[]
}

model Admin {
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  role     Role    @default(ADMIN)
  school   School  @relation(fields: [schoolId], references: [id])
  schoolId String
  note     String?
}

//---END----- Users and user types ------------

model Kid {
  id             String          @id @default(uuid())
  name           String
  parentNote     String?
  hasDailyLunch  Boolean         @default(false)
  parent         Parent          @relation(fields: [parentId], references: [userId])
  parentId       String
  group          Group?          @relation(fields: [groupId], references: [id])
  groupId        String?
  amendLists     AmendList[]
  amendListNotes AmendListNote[]
}

enum AmendActions {
  ADD
  REMOVE
}

model AmendList {
  date           DateTime        @id @unique
  type           AmendActions    @default(ADD)
  group          Group           @relation(fields: [groupId], references: [id])
  groupId        String
  kids           Kid[]
  amendListNotes AmendListNote[]
}

model AmendListNote {
  kid           Kid       @relation(fields: [kidId], references: [id])
  kidId         String
  amendList     AmendList @relation(fields: [amendListDate], references: [date])
  amendListDate DateTime

  @@id([kidId, amendListDate])
}

model DayStats {
  date       DateTime @unique
  addedIds   Int[]
  absentIds  Int[]
  lunchCount Int
}
